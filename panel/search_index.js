var search_data = {"index":{"searchIndex":["mustache","context","sinatra","helpers","template","[]()","[]()","[]=()","classify()","compile()","compile_partial()","compile_sections()","compile_tags()","context()","debug()","escape()","etag()","ev()","mustache()","new()","new()","path()","path=()","registered()","render()","render()","render()","render_mustache()","str()","template()","template()","template=()","template_extension()","template_extension=()","template_file()","template_file=()","templateify()","tmpid()","to_html()","to_html()","to_text()","to_text()","underscore()","utag()","contributors","license","readme.md","mustache.rb","sinatra.rb","version.rb"],"longSearchIndex":["lib/mustache.rb","mustache","mustache","mustache::sinatra","mustache","mustache","mustache::context","mustache","mustache","mustache::template","mustache::template","mustache::template","mustache::template","mustache","mustache","mustache","mustache::template","mustache::template","mustache::sinatra::helpers","mustache::context","mustache::template","mustache","mustache","mustache::sinatra","mustache","mustache","mustache::template","mustache::sinatra::helpers","mustache::template","mustache","mustache","mustache","mustache","mustache","mustache","mustache","mustache","mustache::template","mustache","mustache","mustache","mustache","mustache","mustache::template","files/contributors.html","files/license.html","files/readme_md.html","files/lib/mustache_rb.html","files/lib/mustache/sinatra_rb.html","files/lib/mustache/version_rb.html"],"info":[["Mustache","lib/mustache.rb","classes/Mustache.html"," < Object","",1],["Context","Mustache","classes/Mustache/Context.html"," < Hash","",1],["Sinatra","Mustache","classes/Mustache/Sinatra.html"," < ","Support for Mustache in your Sinatra app. require 'mustache/sinatra' class Hurl < Sinatra::Base register",1],["Helpers","Mustache::Sinatra","classes/Mustache/Sinatra/Helpers.html"," < ","",1],["Template","Mustache","classes/Mustache/Template.html"," < Object","A Template is a compiled version of a Mustache template. ",1],["[]","Mustache","classes/Mustache.html#M000032","(key)","Context accessors ",2],["[]","Mustache::Context","classes/Mustache/Context.html#M000015","(name)","",2],["[]=","Mustache","classes/Mustache.html#M000033","(key, value)","",2],["classify","Mustache","classes/Mustache.html#M000024","(underscored)","template_partial => TemplatePartial ",2],["compile","Mustache::Template","classes/Mustache/Template.html#M000004","(src = @source)","",2],["compile_partial","Mustache::Template","classes/Mustache/Template.html#M000008","(name)","Partials are basically a way to render views from inside other views. ",2],["compile_sections","Mustache::Template","classes/Mustache/Template.html#M000005","(src)","{{#sections}}okay{{/sections}} Sections can return true, false, or an enumerable. If true, the section",2],["compile_tags","Mustache::Template","classes/Mustache/Template.html#M000007","(src)","Find and replace all non-section tags. In particular we look for four types of tags: 1. Escaped variable",2],["context","Mustache","classes/Mustache.html#M000031","()","A helper method which gives access to the context at a given time. Kind of a hack for now, but useful",2],["debug","Mustache","classes/Mustache.html#M000030","()","Pass a block to `debug` with your debug putses. Set the `DEBUG` env variable when you want to run those",2],["escape","Mustache","classes/Mustache.html#M000026","(string)","Escape HTML. ",2],["etag","Mustache::Template","classes/Mustache/Template.html#M000011","(s)","",2],["ev","Mustache::Template","classes/Mustache/Template.html#M000013","(s)","",2],["mustache","Mustache::Sinatra::Helpers","classes/Mustache/Sinatra/Helpers.html#M000000","(template, options={}, locals={})","Call this in your Sinatra routes. ",2],["new","Mustache::Context","classes/Mustache/Context.html#M000014","(mustache)","",2],["new","Mustache::Template","classes/Mustache/Template.html#M000002","(source, template_path)","",2],["path","Mustache","classes/Mustache.html#M000018","()","",2],["path=","Mustache","classes/Mustache.html#M000017","(path)","The path informs your Mustache subclass where to look for its corresponding template. ",2],["registered","Mustache::Sinatra","classes/Mustache/Sinatra.html#M000006","(app)","",2],["render","Mustache","classes/Mustache.html#M000034","(data = template, ctx = {})","Parses our fancy pants template file and returns normal file with all special {{tags}} and {{#sections}}replaced{{/sections}}.",2],["render","Mustache","classes/Mustache.html#M000016","(*args)","Helper method for quickly instantiating and rendering a view. ",2],["render","Mustache::Template","classes/Mustache/Template.html#M000003","(context)","",2],["render_mustache","Mustache::Sinatra::Helpers","classes/Mustache/Sinatra/Helpers.html#M000001","(template, data, opts, locals, &block)","This is called by Sinatra's `render` with the proper paths and, potentially, a block containing a sub-view",2],["str","Mustache::Template","classes/Mustache/Template.html#M000010","(s)","",2],["template","Mustache","classes/Mustache.html#M000028","()","The template itself. You can override this if you'd like. ",2],["template","Mustache","classes/Mustache.html#M000021","()","",2],["template=","Mustache","classes/Mustache.html#M000029","(template)","",2],["template_extension","Mustache","classes/Mustache.html#M000022","()","Default extension is 'html' ",2],["template_extension=","Mustache","classes/Mustache.html#M000023","(template_extension)","",2],["template_file","Mustache","classes/Mustache.html#M000019","()","Templates are self.class.name.underscore + extension -- a class of Dashboard would have a template (relative",2],["template_file=","Mustache","classes/Mustache.html#M000020","(template_file)","",2],["templateify","Mustache","classes/Mustache.html#M000027","(obj)","",2],["tmpid","Mustache::Template","classes/Mustache/Template.html#M000009","()","Generate a temporary id. ",2],["to_html","Mustache","classes/Mustache.html#M000037","(data = template, ctx = {})","Alias for #render",2],["to_html","Mustache","classes/Mustache.html#M000035","(data = template, ctx = {})","Alias for #render",2],["to_text","Mustache","classes/Mustache.html#M000036","(data = template, ctx = {})","Alias for #render",2],["to_text","Mustache","classes/Mustache.html#M000038","(data = template, ctx = {})","Alias for #render",2],["underscore","Mustache","classes/Mustache.html#M000025","(classified)","TemplatePartial => template_partial ",2],["utag","Mustache::Template","classes/Mustache/Template.html#M000012","(s)","",2],["CONTRIBUTORS","files/CONTRIBUTORS.html","files/CONTRIBUTORS.html","","* Chris Wanstrath * Francesc Esplugas * Magnus Holm * Nicolas Sanguinetti * Jan-Erik Rediger ",3],["LICENSE","files/LICENSE.html","files/LICENSE.html","","Copyright (c) 2009 Chris Wanstrath  Permission is hereby granted, free of charge, to any person obtaining",3],["README.md","files/README_md.html","files/README_md.html","","Mustache =========  Inspired by [ctemplate](http://code.google.com/p/google-ctemplate/) and [et](http://www.ivan.fomichev.name/2008/05/erlang-template-engine-prototype.html),",3],["mustache.rb","files/lib/mustache_rb.html","files/lib/mustache_rb.html","","",3],["sinatra.rb","files/lib/mustache/sinatra_rb.html","files/lib/mustache/sinatra_rb.html","","",3],["version.rb","files/lib/mustache/version_rb.html","files/lib/mustache/version_rb.html","","",3]]}}