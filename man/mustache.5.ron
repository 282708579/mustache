mustache(5) -- Logic-less templates.
====================================

## SYNOPSIS

A typical Mustache template:

    Hello {{name}}
    You have just won ${{value}}!
    {{#in_ca}}
    Well, ${{taxed_value}}, after taxes.
    {{/in_ca}}

Given the following hash:

    {
      "name": "Chris",
      "value": 10000,
      "taxed_value": 10000 - (10000 * 0.4),
      "in_ca": true
    }

Will produce the following:

    Hello Chris
    You have just won $10000!
    Well, $6000.0, after taxes.


## DESCRIPTION

Mustache can be used for HTML, config files, source code -
anything. It works by expanding tags in a template using values
provided in a hash or object.

We call it "logic-less" because there are no if statements, else
clauses, or for loops. Instead there are only tags. Some tags are
replaced with a value, some nothing, and others a series of
values. This document explains the different types of Mustache tags.


## TAG TYPES

Tags are indicated by the double mustaches. `{{name}}` is a tag. Let's
talk about the different types of tags.


### Variables

The most basic tag is the variable. A `{{name}}` tag in a basic
template will try to call the `name` method on your view. If there is
no `name` method, an exception will be raised.

All variables are HTML escaped by default. If you want to return
unescaped HTML, use the triple mustache: `{{{name}}}`.

You can also use `&` to unescape a variable: `{{& name}}`. This may be
useful when changing delimiters (see "Set Delimter" below).

By default a variable "miss" returns an empty string. This can usually
be configured in your Mustache library.

Template:

    * {{name}}
    * {{age}}
    * {{company}}
    * {{{company}}}

Hash:

    {
      "name": "Chris",
      "company": "<b>GitHub</b>"
    }

Output:

    * Chris
    *
    * &lt;b&gt;GitHub&lt;/b&gt;
    * <b>GitHub</b>

### Sections

Sections render blocks of text one or more times, depending on the
value of the referenced tag.

A section begins with a pound and ends with a slash. That is,
`{{#person}}` begins a "person" section while `{{/person}}` ends it.

If the `person` key exists and calling it returns false or an empty
list, the HTML between the pound and slash will not be displayed.

If the `person` method exists and calling it returns true or an
object, the HTML between the pound and slash will be rendered and
displayed exactly one time. The object that was returned by the
`person` method will become the context of the block, as well.

If the `person` method exists and calling it returns a non-empty list,
the text in the block will be displayed once for each item in the
list. The context of the block will be set to the current item for
each iteration. In this way we can loop over collections.

Template:

    {{#person}}
      Shown!
    {{/person}}
    {{#anything_else}}
      Never shown!
    {{/anything_else}}
    {{#repo}}
      <b>{{name}}</b>
    {{/repo}}

Hash:

    {
      "person": true,
      "repo": [
        { "name": "resque" },
        { "name": "hub" },
        { "name": "rip" },
      ]
    }

Output:

    Shown!
    <b>resque</b>
    <b>hub</b>
    <b>rip</b>

### Comments

Comments begin with a bang and are ignored. The following template:

    <h1>Today{{! ignore me }}.</h1>

Will render as follows:

    <h1>Today.</h1>


### Partials

Partials begin with a greater than sign, like `{{> box}}`.

It is useful to think of partials as a "template expansion" - that is,
the actual partial tag will be replaced with the content of the
partial. Therefor partials share the current context.

For example, this template and partial:

    base.mustache:
    <h2>Names</h2>
    {{# names }}
      {{> user }}
    {{/ names }}

    user.mustache:
    <strong>{{ name }}</strong>

Can be thought of as a single, expanded template:

    <h2>Names</h2>
    {{# names }}
      <strong>{{ name }}</strong>
    {{/ names }}


### Set Delimiter

Set Delimiter tags start with an equal sign and change the tag
delimiters from {{ and }} to custom strings.

Consider the following contrived example:

    * {{ default_tags }}
    {{=<% %>=}}
    * <% erb_style_tags %>
    <%={{ }}=%>
    * {{ default_tags_again }}

Here we have a list with three items. The first item uses the default
tag style, the second uses erb style as defined by the Set Delimiter
tag, and the third returns to the default style after yet another Set
Delimiter declaration.

According to [ctemplates][ct], this "is useful for languages like TeX, where
double-braces may occur in the text and are awkward to use for
markup."

Custom delimiters may not contain whitespace or the equals sign.

[ct]: http://google-ctemplate.googlecode.com/svn/trunk/doc/howto.html


## COPYRIGHT

Mustache is Copyright (C) 2009 Chris Wanstrath

Original CTemplate by Google


## SEE ALSO

mustache(1), mustache(7), gem(1),
<http://defunkt.github.com/mustache/>
