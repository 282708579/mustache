.\" generated with Ronn/v0.4.1
.\" http://github.com/rtomayko/ronn/
.
.TH "MUSTACHE" "5" "April 2010" "DEFUNKT" "Mustache Manual"
.
.SH "NAME"
\fBmustache\fR \-\- Logic\-less templates.
.
.SH "SYNOPSIS"
A typical Mustache template:
.
.IP "" 4
.
.nf
Hello {{name}}
You have just won ${{value}}!
{{#in_ca}}
Well, ${{taxed_value}}, after taxes.
{{/in_ca}}
.
.fi
.
.IP "" 0
.
.P
Given the following hash:
.
.IP "" 4
.
.nf
{
  "name": "Chris",
  "value": 10000,
  "taxed_value": 10000 \- (10000 * 0.4),
  "in_ca": true
}
.
.fi
.
.IP "" 0
.
.P
Will produce the following:
.
.IP "" 4
.
.nf
Hello Chris
You have just won $10000!
Well, $6000.0, after taxes.
.
.fi
.
.IP "" 0
.
.SH "DESCRIPTION"
Mustache can be used for HTML, config files, source code \-
anything. It works by expanding tags in a template using values
provided in a hash or object.
.
.P
We call it "logic\-less" because there are no if statements, else
clauses, or for loops. Instead there are only tags. Some tags are
replaced with a value, some nothing, and others a series of
values. This document explains the different types of Mustache tags.
.
.SH "TAG TYPES"
Tags are indicated by the double mustaches. \fB{{name}}\fR is a tag, as is \fB{{#name}}\fR. Let's talk about the different types of tags.
.
.SS "Variables"
The most basic tag is the variable. A \fB{{name}}\fR tag in a basic
template will try to find the \fBname\fR key or method on your view. If
there is no \fBname\fR method, nothing will be rendered.
.
.P
All variables are HTML escaped by default. If you want to return
unescaped HTML, use the triple mustache: \fB{{{name}}}\fR.
.
.P
You can also use \fB&\fR to unescape a variable: \fB{{& name}}\fR. This may be
useful when changing delimiters (see "Set Delimter" below).
.
.P
By default a variable "miss" returns an empty string. This can usually
be configured in your Mustache library. The Ruby version of Mustache
supports raising an exception in this situation, for instance.
.
.P
Template:
.
.IP "" 4
.
.nf
* {{name}}
* {{age}}
* {{company}}
* {{{company}}}
.
.fi
.
.IP "" 0
.
.P
Hash:
.
.IP "" 4
.
.nf
{
  "name": "Chris",
  "company": "<b>GitHub</b>"
}
.
.fi
.
.IP "" 0
.
.P
Output:
.
.IP "" 4
.
.nf
* Chris
*
* &lt;b&gt;GitHub&lt;/b&gt;
* <b>GitHub</b>
.
.fi
.
.IP "" 0
.
.SS "Sections"
Sections render blocks of text one or more times, depending on the
value of the referenced tag.
.
.P
A section begins with a pound and ends with a slash. That is,\fB{{#person}}\fR begins a "person" section while \fB{{/person}}\fR ends it.
.
.P
If the \fBperson\fR key exists and calling it returns false or an empty
list, the HTML between the pound and slash will not be displayed.
.
.P
If the \fBperson\fR method exists and calling it returns true or an
object, the HTML between the pound and slash will be rendered and
displayed exactly one time. The object that was returned by the \fBperson\fR method will become the context of the block, as well.
.
.P
If the \fBperson\fR method exists and calling it returns a non\-empty list,
the text in the block will be displayed once for each item in the
list. The context of the block will be set to the current item for
each iteration. In this way we can loop over collections.
.
.P
Template:
.
.IP "" 4
.
.nf
{{#person}}
  Shown!
{{/person}}
{{#anything_else}}
  Never shown!
{{/anything_else}}
{{#repo}}
  <b>{{name}}</b>
{{/repo}}
.
.fi
.
.IP "" 0
.
.P
Hash:
.
.IP "" 4
.
.nf
{
  "person": true,
  "repo": [
    { "name": "resque" },
    { "name": "hub" },
    { "name": "rip" },
  ]
}
.
.fi
.
.IP "" 0
.
.P
Output:
.
.IP "" 4
.
.nf
Shown!
<b>resque</b>
<b>hub</b>
<b>rip</b>
.
.fi
.
.IP "" 0
.
.SS "Inverted Sections"
An inverted section begins with a caret (hat) and ends with a
slash. That is \fB{{^person}}\fR begins a "person" inverted section while \fB{{/person}}\fR ends it.
.
.P
While sections can be used to render text one or more times based on the
value of the key given, inverted sections may render text once based
on the inverse value of the key given. That is, they will be rendered
if the key doesn't exist, is false, or is an empty list.
.
.P
Template:
.
.IP "" 4
.
.nf
{{#repo}}
  <b>{{name}}</b>
{{/repo}}
{{^repo}}
  No repos :(
{{/repo}}
.
.fi
.
.IP "" 0
.
.P
Hash:
.
.IP "" 4
.
.nf
{
  "repo": []
}
.
.fi
.
.IP "" 0
.
.P
Output:
.
.IP "" 4
.
.nf
No repos :(
.
.fi
.
.IP "" 0
.
.SS "Comments"
Comments begin with a bang and are ignored. The following template:
.
.IP "" 4
.
.nf
<h1>Today{{! ignore me }}.</h1>
.
.fi
.
.IP "" 0
.
.P
Will render as follows:
.
.IP "" 4
.
.nf
<h1>Today.</h1>
.
.fi
.
.IP "" 0
.
.SS "Partials"
Partials begin with a greater than sign, like \fB{{> box}}\fR.
.
.P
Partials are rendered at runtime (as opposed to compile time), so
recursive partials are possible. Just avoid infinite loops.
.
.P
They also inherit the calling context. Whereas in ERB you may have
this:
.
.IP "" 4
.
.nf
<%= partial :next_more, :start => start, :size => size %>
.
.fi
.
.IP "" 0
.
.P
Mustache requires only this:
.
.IP "" 4
.
.nf
{{> next_more}}
.
.fi
.
.IP "" 0
.
.P
Why? Because the \fBnext_more.mustache\fR file will inherit the \fBsize\fR and \fBstart\fR methods from the calling context.
.
.P
In this way you may want to think of partials as includes, or template
expansion, even though it's not literally true.
.
.P
For example, this template and partial:
.
.IP "" 4
.
.nf
base.mustache:
<h2>Names</h2>
{{# names }}
  {{> user }}
{{/ names }}
user.mustache:
<strong>{{ name }}</strong>
.
.fi
.
.IP "" 0
.
.P
Can be thought of as a single, expanded template:
.
.IP "" 4
.
.nf
<h2>Names</h2>
{{# names }}
  <strong>{{ name }}</strong>
{{/ names }}
.
.fi
.
.IP "" 0
.
.SS "Set Delimiter"
Set Delimiter tags start with an equal sign and change the tag
delimiters from {{ and }} to custom strings.
.
.P
Consider the following contrived example:
.
.IP "" 4
.
.nf
* {{ default_tags }}
{{=<% %>=}}
* <% erb_style_tags %>
<%={{ }}=%>
* {{ default_tags_again }}
.
.fi
.
.IP "" 0
.
.P
Here we have a list with three items. The first item uses the default
tag style, the second uses erb style as defined by the Set Delimiter
tag, and the third returns to the default style after yet another Set
Delimiter declaration.
.
.P
According to \fIctemplates\fR, this "is useful for languages like TeX, where
double\-braces may occur in the text and are awkward to use for
markup."
.
.P
Custom delimiters may not contain whitespace or the equals sign.
.
.SH "COPYRIGHT"
Mustache is Copyright (C) 2009 Chris Wanstrath
.
.P
Original CTemplate by Google
.
.SH "SEE ALSO"
mustache(1), mustache(7), gem(1),\fIhttp://mustache.github.com/\fR
